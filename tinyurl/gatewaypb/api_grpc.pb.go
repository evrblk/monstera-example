// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: gatewaypb/api.proto

package gatewaypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TinyUrlServiceApi_GetUser_FullMethodName        = "/com.evrblk.monstera_example.tinyurl.gatewaypb.TinyUrlServiceApi/GetUser"
	TinyUrlServiceApi_GetShortUrl_FullMethodName    = "/com.evrblk.monstera_example.tinyurl.gatewaypb.TinyUrlServiceApi/GetShortUrl"
	TinyUrlServiceApi_CreateShortUrl_FullMethodName = "/com.evrblk.monstera_example.tinyurl.gatewaypb.TinyUrlServiceApi/CreateShortUrl"
	TinyUrlServiceApi_ListShortUrls_FullMethodName  = "/com.evrblk.monstera_example.tinyurl.gatewaypb.TinyUrlServiceApi/ListShortUrls"
)

// TinyUrlServiceApiClient is the client API for TinyUrlServiceApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TinyUrlServiceApiClient interface {
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	GetShortUrl(ctx context.Context, in *GetShortUrlRequest, opts ...grpc.CallOption) (*GetShortUrlResponse, error)
	CreateShortUrl(ctx context.Context, in *CreateShortUrlRequest, opts ...grpc.CallOption) (*CreateShortUrlResponse, error)
	ListShortUrls(ctx context.Context, in *ListShortUrlsRequest, opts ...grpc.CallOption) (*ListShortUrlsResponse, error)
}

type tinyUrlServiceApiClient struct {
	cc grpc.ClientConnInterface
}

func NewTinyUrlServiceApiClient(cc grpc.ClientConnInterface) TinyUrlServiceApiClient {
	return &tinyUrlServiceApiClient{cc}
}

func (c *tinyUrlServiceApiClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, TinyUrlServiceApi_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinyUrlServiceApiClient) GetShortUrl(ctx context.Context, in *GetShortUrlRequest, opts ...grpc.CallOption) (*GetShortUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShortUrlResponse)
	err := c.cc.Invoke(ctx, TinyUrlServiceApi_GetShortUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinyUrlServiceApiClient) CreateShortUrl(ctx context.Context, in *CreateShortUrlRequest, opts ...grpc.CallOption) (*CreateShortUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateShortUrlResponse)
	err := c.cc.Invoke(ctx, TinyUrlServiceApi_CreateShortUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinyUrlServiceApiClient) ListShortUrls(ctx context.Context, in *ListShortUrlsRequest, opts ...grpc.CallOption) (*ListShortUrlsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListShortUrlsResponse)
	err := c.cc.Invoke(ctx, TinyUrlServiceApi_ListShortUrls_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TinyUrlServiceApiServer is the server API for TinyUrlServiceApi service.
// All implementations must embed UnimplementedTinyUrlServiceApiServer
// for forward compatibility.
type TinyUrlServiceApiServer interface {
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	GetShortUrl(context.Context, *GetShortUrlRequest) (*GetShortUrlResponse, error)
	CreateShortUrl(context.Context, *CreateShortUrlRequest) (*CreateShortUrlResponse, error)
	ListShortUrls(context.Context, *ListShortUrlsRequest) (*ListShortUrlsResponse, error)
	mustEmbedUnimplementedTinyUrlServiceApiServer()
}

// UnimplementedTinyUrlServiceApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTinyUrlServiceApiServer struct{}

func (UnimplementedTinyUrlServiceApiServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedTinyUrlServiceApiServer) GetShortUrl(context.Context, *GetShortUrlRequest) (*GetShortUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortUrl not implemented")
}
func (UnimplementedTinyUrlServiceApiServer) CreateShortUrl(context.Context, *CreateShortUrlRequest) (*CreateShortUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortUrl not implemented")
}
func (UnimplementedTinyUrlServiceApiServer) ListShortUrls(context.Context, *ListShortUrlsRequest) (*ListShortUrlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShortUrls not implemented")
}
func (UnimplementedTinyUrlServiceApiServer) mustEmbedUnimplementedTinyUrlServiceApiServer() {}
func (UnimplementedTinyUrlServiceApiServer) testEmbeddedByValue()                           {}

// UnsafeTinyUrlServiceApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TinyUrlServiceApiServer will
// result in compilation errors.
type UnsafeTinyUrlServiceApiServer interface {
	mustEmbedUnimplementedTinyUrlServiceApiServer()
}

func RegisterTinyUrlServiceApiServer(s grpc.ServiceRegistrar, srv TinyUrlServiceApiServer) {
	// If the following call pancis, it indicates UnimplementedTinyUrlServiceApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TinyUrlServiceApi_ServiceDesc, srv)
}

func _TinyUrlServiceApi_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyUrlServiceApiServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TinyUrlServiceApi_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyUrlServiceApiServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinyUrlServiceApi_GetShortUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyUrlServiceApiServer).GetShortUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TinyUrlServiceApi_GetShortUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyUrlServiceApiServer).GetShortUrl(ctx, req.(*GetShortUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinyUrlServiceApi_CreateShortUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyUrlServiceApiServer).CreateShortUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TinyUrlServiceApi_CreateShortUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyUrlServiceApiServer).CreateShortUrl(ctx, req.(*CreateShortUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinyUrlServiceApi_ListShortUrls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShortUrlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyUrlServiceApiServer).ListShortUrls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TinyUrlServiceApi_ListShortUrls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyUrlServiceApiServer).ListShortUrls(ctx, req.(*ListShortUrlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TinyUrlServiceApi_ServiceDesc is the grpc.ServiceDesc for TinyUrlServiceApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TinyUrlServiceApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.evrblk.monstera_example.tinyurl.gatewaypb.TinyUrlServiceApi",
	HandlerType: (*TinyUrlServiceApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _TinyUrlServiceApi_GetUser_Handler,
		},
		{
			MethodName: "GetShortUrl",
			Handler:    _TinyUrlServiceApi_GetShortUrl_Handler,
		},
		{
			MethodName: "CreateShortUrl",
			Handler:    _TinyUrlServiceApi_CreateShortUrl_Handler,
		},
		{
			MethodName: "ListShortUrls",
			Handler:    _TinyUrlServiceApi_ListShortUrls_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gatewaypb/api.proto",
}
