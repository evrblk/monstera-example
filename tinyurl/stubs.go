// Code generated by `monstera generate`. DO NOT EDIT.

package tinyurl

import (
	"context"
	monstera "github.com/evrblk/monstera"
	corepb "github.com/evrblk/monstera-example/tinyurl/corepb"
	monsterax "github.com/evrblk/monstera/x"
	"sync"
)

type TinyUrlServiceMonsteraShardKeyCalculator interface {
	GetShortUrlShardKey(request *corepb.GetShortUrlRequest) []byte
	ListShortUrlsShardKey(request *corepb.ListShortUrlsRequest) []byte
	CreateShortUrlShardKey(request *corepb.CreateShortUrlRequest) []byte

	GetUserShardKey(request *corepb.GetUserRequest) []byte
	CreateUserShardKey(request *corepb.CreateUserRequest) []byte
}

type TinyUrlServiceCoreApiMonsteraStub struct {
	monsteraClient     *monstera.MonsteraClient
	shardKeyCalculator TinyUrlServiceMonsteraShardKeyCalculator
}

var _ TinyUrlServiceCoreApi = &TinyUrlServiceCoreApiMonsteraStub{}

func (s *TinyUrlServiceCoreApiMonsteraStub) GetShortUrl(ctx context.Context, request *corepb.GetShortUrlRequest) (*corepb.GetShortUrlResponse, error) {
	readRequest := &corepb.ReadRequest{Request: &corepb.ReadRequest_GetShortUrlRequest{GetShortUrlRequest: request}}
	readResponse := &corepb.ReadResponse{}
	shardKey := s.shardKeyCalculator.GetShortUrlShardKey(request)

	err := s.monsteraClient.Read(ctx, "ShortUrls", shardKey, true, readRequest, readResponse)
	if err != nil {
		return nil, err
	}

	response, ok := readResponse.Response.(*corepb.ReadResponse_GetShortUrlResponse)
	if ok {
		return response.GetShortUrlResponse, nilifyIfEmpty(readResponse.Error)
	} else {
		return nil, monsterax.NewErrorWithContext(monsterax.Internal, "invalid response type", map[string]string{"response": readResponse.String()})
	}
}

func (s *TinyUrlServiceCoreApiMonsteraStub) ListShortUrls(ctx context.Context, request *corepb.ListShortUrlsRequest) (*corepb.ListShortUrlsResponse, error) {
	readRequest := &corepb.ReadRequest{Request: &corepb.ReadRequest_ListShortUrlsRequest{ListShortUrlsRequest: request}}
	readResponse := &corepb.ReadResponse{}
	shardKey := s.shardKeyCalculator.ListShortUrlsShardKey(request)

	err := s.monsteraClient.Read(ctx, "ShortUrls", shardKey, false, readRequest, readResponse)
	if err != nil {
		return nil, err
	}

	response, ok := readResponse.Response.(*corepb.ReadResponse_ListShortUrlsResponse)
	if ok {
		return response.ListShortUrlsResponse, nilifyIfEmpty(readResponse.Error)
	} else {
		return nil, monsterax.NewErrorWithContext(monsterax.Internal, "invalid response type", map[string]string{"response": readResponse.String()})
	}
}

func (s *TinyUrlServiceCoreApiMonsteraStub) CreateShortUrl(ctx context.Context, request *corepb.CreateShortUrlRequest) (*corepb.CreateShortUrlResponse, error) {
	updateRequest := &corepb.UpdateRequest{Request: &corepb.UpdateRequest_CreateShortUrlRequest{CreateShortUrlRequest: request}}
	updateResponse := &corepb.UpdateResponse{}
	shardKey := s.shardKeyCalculator.CreateShortUrlShardKey(request)

	err := s.monsteraClient.Update(ctx, "ShortUrls", shardKey, updateRequest, updateResponse)
	if err != nil {
		return nil, err
	}

	response, ok := updateResponse.Response.(*corepb.UpdateResponse_CreateShortUrlResponse)
	if ok {
		return response.CreateShortUrlResponse, nilifyIfEmpty(updateResponse.Error)
	} else {
		return nil, monsterax.NewErrorWithContext(monsterax.Internal, "invalid response type", map[string]string{"response": updateResponse.String()})
	}
}

func (s *TinyUrlServiceCoreApiMonsteraStub) GetUser(ctx context.Context, request *corepb.GetUserRequest) (*corepb.GetUserResponse, error) {
	readRequest := &corepb.ReadRequest{Request: &corepb.ReadRequest_GetUserRequest{GetUserRequest: request}}
	readResponse := &corepb.ReadResponse{}
	shardKey := s.shardKeyCalculator.GetUserShardKey(request)

	err := s.monsteraClient.Read(ctx, "Users", shardKey, false, readRequest, readResponse)
	if err != nil {
		return nil, err
	}

	response, ok := readResponse.Response.(*corepb.ReadResponse_GetUserResponse)
	if ok {
		return response.GetUserResponse, nilifyIfEmpty(readResponse.Error)
	} else {
		return nil, monsterax.NewErrorWithContext(monsterax.Internal, "invalid response type", map[string]string{"response": readResponse.String()})
	}
}

func (s *TinyUrlServiceCoreApiMonsteraStub) CreateUser(ctx context.Context, request *corepb.CreateUserRequest) (*corepb.CreateUserResponse, error) {
	updateRequest := &corepb.UpdateRequest{Request: &corepb.UpdateRequest_CreateUserRequest{CreateUserRequest: request}}
	updateResponse := &corepb.UpdateResponse{}
	shardKey := s.shardKeyCalculator.CreateUserShardKey(request)

	err := s.monsteraClient.Update(ctx, "Users", shardKey, updateRequest, updateResponse)
	if err != nil {
		return nil, err
	}

	response, ok := updateResponse.Response.(*corepb.UpdateResponse_CreateUserResponse)
	if ok {
		return response.CreateUserResponse, nilifyIfEmpty(updateResponse.Error)
	} else {
		return nil, monsterax.NewErrorWithContext(monsterax.Internal, "invalid response type", map[string]string{"response": updateResponse.String()})
	}
}

func NewTinyUrlServiceCoreApiMonsteraStub(monsteraClient *monstera.MonsteraClient, shardKeyCalculator TinyUrlServiceMonsteraShardKeyCalculator) *TinyUrlServiceCoreApiMonsteraStub {
	return &TinyUrlServiceCoreApiMonsteraStub{monsteraClient: monsteraClient, shardKeyCalculator: shardKeyCalculator}
}

func nilifyIfEmpty(err *monsterax.Error) error {
	if err == nil || err.Code == monsterax.ErrorCode_INVALID || err.Code == monsterax.ErrorCode_OK {
		return nil
	} else {
		return err
	}
}

type TinyUrlServiceCoreApiStandaloneStub struct {
	shortUrlsCore ShortUrlsCoreApi
	usersCore     UsersCoreApi

	mu sync.RWMutex
}

func (s *TinyUrlServiceCoreApiStandaloneStub) GetShortUrl(ctx context.Context, request *corepb.GetShortUrlRequest) (*corepb.GetShortUrlResponse, error) {
	s.mu.RLock()
	defer s.mu.RUnlock()

	return s.shortUrlsCore.GetShortUrl(request)
}

func (s *TinyUrlServiceCoreApiStandaloneStub) ListShortUrls(ctx context.Context, request *corepb.ListShortUrlsRequest) (*corepb.ListShortUrlsResponse, error) {
	s.mu.RLock()
	defer s.mu.RUnlock()

	return s.shortUrlsCore.ListShortUrls(request)
}

func (s *TinyUrlServiceCoreApiStandaloneStub) CreateShortUrl(ctx context.Context, request *corepb.CreateShortUrlRequest) (*corepb.CreateShortUrlResponse, error) {
	s.mu.Lock()
	defer s.mu.Unlock()

	return s.shortUrlsCore.CreateShortUrl(request)
}

func (s *TinyUrlServiceCoreApiStandaloneStub) GetUser(ctx context.Context, request *corepb.GetUserRequest) (*corepb.GetUserResponse, error) {
	s.mu.RLock()
	defer s.mu.RUnlock()

	return s.usersCore.GetUser(request)
}

func (s *TinyUrlServiceCoreApiStandaloneStub) CreateUser(ctx context.Context, request *corepb.CreateUserRequest) (*corepb.CreateUserResponse, error) {
	s.mu.Lock()
	defer s.mu.Unlock()

	return s.usersCore.CreateUser(request)
}

func NewTinyUrlServiceCoreApiStandaloneStub(shortUrlsCore ShortUrlsCoreApi, usersCore UsersCoreApi) *TinyUrlServiceCoreApiStandaloneStub {
	return &TinyUrlServiceCoreApiStandaloneStub{shortUrlsCore: shortUrlsCore, usersCore: usersCore}
}
