// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v6.31.1
// source: corepb/cloud.proto

package corepb

import (
	x "github.com/evrblk/monstera/x"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReadRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*ReadRequest_GetShortUrlRequest
	//	*ReadRequest_ListShortUrlsRequest
	//	*ReadRequest_GetUserRequest
	Request       isReadRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadRequest) Reset() {
	*x = ReadRequest{}
	mi := &file_corepb_cloud_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRequest) ProtoMessage() {}

func (x *ReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_corepb_cloud_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRequest.ProtoReflect.Descriptor instead.
func (*ReadRequest) Descriptor() ([]byte, []int) {
	return file_corepb_cloud_proto_rawDescGZIP(), []int{0}
}

func (x *ReadRequest) GetRequest() isReadRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ReadRequest) GetGetShortUrlRequest() *GetShortUrlRequest {
	if x != nil {
		if x, ok := x.Request.(*ReadRequest_GetShortUrlRequest); ok {
			return x.GetShortUrlRequest
		}
	}
	return nil
}

func (x *ReadRequest) GetListShortUrlsRequest() *ListShortUrlsRequest {
	if x != nil {
		if x, ok := x.Request.(*ReadRequest_ListShortUrlsRequest); ok {
			return x.ListShortUrlsRequest
		}
	}
	return nil
}

func (x *ReadRequest) GetGetUserRequest() *GetUserRequest {
	if x != nil {
		if x, ok := x.Request.(*ReadRequest_GetUserRequest); ok {
			return x.GetUserRequest
		}
	}
	return nil
}

type isReadRequest_Request interface {
	isReadRequest_Request()
}

type ReadRequest_GetShortUrlRequest struct {
	GetShortUrlRequest *GetShortUrlRequest `protobuf:"bytes,2,opt,name=get_short_url_request,json=getShortUrlRequest,proto3,oneof"`
}

type ReadRequest_ListShortUrlsRequest struct {
	ListShortUrlsRequest *ListShortUrlsRequest `protobuf:"bytes,3,opt,name=list_short_urls_request,json=listShortUrlsRequest,proto3,oneof"`
}

type ReadRequest_GetUserRequest struct {
	GetUserRequest *GetUserRequest `protobuf:"bytes,4,opt,name=get_user_request,json=getUserRequest,proto3,oneof"`
}

func (*ReadRequest_GetShortUrlRequest) isReadRequest_Request() {}

func (*ReadRequest_ListShortUrlsRequest) isReadRequest_Request() {}

func (*ReadRequest_GetUserRequest) isReadRequest_Request() {}

type ReadResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Error *x.Error               `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Types that are valid to be assigned to Response:
	//
	//	*ReadResponse_GetShortUrlResponse
	//	*ReadResponse_ListShortUrlsResponse
	//	*ReadResponse_GetUserResponse
	Response      isReadResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadResponse) Reset() {
	*x = ReadResponse{}
	mi := &file_corepb_cloud_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResponse) ProtoMessage() {}

func (x *ReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_corepb_cloud_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResponse.ProtoReflect.Descriptor instead.
func (*ReadResponse) Descriptor() ([]byte, []int) {
	return file_corepb_cloud_proto_rawDescGZIP(), []int{1}
}

func (x *ReadResponse) GetError() *x.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReadResponse) GetResponse() isReadResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ReadResponse) GetGetShortUrlResponse() *GetShortUrlResponse {
	if x != nil {
		if x, ok := x.Response.(*ReadResponse_GetShortUrlResponse); ok {
			return x.GetShortUrlResponse
		}
	}
	return nil
}

func (x *ReadResponse) GetListShortUrlsResponse() *ListShortUrlsResponse {
	if x != nil {
		if x, ok := x.Response.(*ReadResponse_ListShortUrlsResponse); ok {
			return x.ListShortUrlsResponse
		}
	}
	return nil
}

func (x *ReadResponse) GetGetUserResponse() *GetUserResponse {
	if x != nil {
		if x, ok := x.Response.(*ReadResponse_GetUserResponse); ok {
			return x.GetUserResponse
		}
	}
	return nil
}

type isReadResponse_Response interface {
	isReadResponse_Response()
}

type ReadResponse_GetShortUrlResponse struct {
	GetShortUrlResponse *GetShortUrlResponse `protobuf:"bytes,2,opt,name=get_short_url_response,json=getShortUrlResponse,proto3,oneof"`
}

type ReadResponse_ListShortUrlsResponse struct {
	ListShortUrlsResponse *ListShortUrlsResponse `protobuf:"bytes,3,opt,name=list_short_urls_response,json=listShortUrlsResponse,proto3,oneof"`
}

type ReadResponse_GetUserResponse struct {
	GetUserResponse *GetUserResponse `protobuf:"bytes,4,opt,name=get_user_response,json=getUserResponse,proto3,oneof"`
}

func (*ReadResponse_GetShortUrlResponse) isReadResponse_Response() {}

func (*ReadResponse_ListShortUrlsResponse) isReadResponse_Response() {}

func (*ReadResponse_GetUserResponse) isReadResponse_Response() {}

type UpdateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*UpdateRequest_CreateUserRequest
	//	*UpdateRequest_CreateShortUrlRequest
	Request       isUpdateRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	mi := &file_corepb_cloud_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_corepb_cloud_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_corepb_cloud_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateRequest) GetRequest() isUpdateRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *UpdateRequest) GetCreateUserRequest() *CreateUserRequest {
	if x != nil {
		if x, ok := x.Request.(*UpdateRequest_CreateUserRequest); ok {
			return x.CreateUserRequest
		}
	}
	return nil
}

func (x *UpdateRequest) GetCreateShortUrlRequest() *CreateShortUrlRequest {
	if x != nil {
		if x, ok := x.Request.(*UpdateRequest_CreateShortUrlRequest); ok {
			return x.CreateShortUrlRequest
		}
	}
	return nil
}

type isUpdateRequest_Request interface {
	isUpdateRequest_Request()
}

type UpdateRequest_CreateUserRequest struct {
	CreateUserRequest *CreateUserRequest `protobuf:"bytes,2,opt,name=create_user_request,json=createUserRequest,proto3,oneof"`
}

type UpdateRequest_CreateShortUrlRequest struct {
	CreateShortUrlRequest *CreateShortUrlRequest `protobuf:"bytes,3,opt,name=create_short_url_request,json=createShortUrlRequest,proto3,oneof"`
}

func (*UpdateRequest_CreateUserRequest) isUpdateRequest_Request() {}

func (*UpdateRequest_CreateShortUrlRequest) isUpdateRequest_Request() {}

type UpdateResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Error *x.Error               `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Types that are valid to be assigned to Response:
	//
	//	*UpdateResponse_CreateUserResponse
	//	*UpdateResponse_CreateShortUrlResponse
	Response      isUpdateResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateResponse) Reset() {
	*x = UpdateResponse{}
	mi := &file_corepb_cloud_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponse) ProtoMessage() {}

func (x *UpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_corepb_cloud_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponse.ProtoReflect.Descriptor instead.
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return file_corepb_cloud_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateResponse) GetError() *x.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *UpdateResponse) GetResponse() isUpdateResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *UpdateResponse) GetCreateUserResponse() *CreateUserResponse {
	if x != nil {
		if x, ok := x.Response.(*UpdateResponse_CreateUserResponse); ok {
			return x.CreateUserResponse
		}
	}
	return nil
}

func (x *UpdateResponse) GetCreateShortUrlResponse() *CreateShortUrlResponse {
	if x != nil {
		if x, ok := x.Response.(*UpdateResponse_CreateShortUrlResponse); ok {
			return x.CreateShortUrlResponse
		}
	}
	return nil
}

type isUpdateResponse_Response interface {
	isUpdateResponse_Response()
}

type UpdateResponse_CreateUserResponse struct {
	CreateUserResponse *CreateUserResponse `protobuf:"bytes,2,opt,name=create_user_response,json=createUserResponse,proto3,oneof"`
}

type UpdateResponse_CreateShortUrlResponse struct {
	CreateShortUrlResponse *CreateShortUrlResponse `protobuf:"bytes,3,opt,name=create_short_url_response,json=createShortUrlResponse,proto3,oneof"`
}

func (*UpdateResponse_CreateUserResponse) isUpdateResponse_Response() {}

func (*UpdateResponse_CreateShortUrlResponse) isUpdateResponse_Response() {}

var File_corepb_cloud_proto protoreflect.FileDescriptor

var file_corepb_cloud_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2a, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b,
	0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x74, 0x69, 0x6e, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62,
	0x1a, 0x10, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0e, 0x78, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf6, 0x02, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x73, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x75, 0x72, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x74, 0x69, 0x6e, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x12, 0x67, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x79, 0x0a, 0x17, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x5f, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x74, 0x69, 0x6e, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x55,
	0x72, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x6c, 0x69,
	0x73, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x66, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x61, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x74, 0x69, 0x6e, 0x79, 0x75,
	0x72, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0xb7, 0x03, 0x0a, 0x0c,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x78, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x76, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x5f,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x5f, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x74, 0x69, 0x6e, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x55, 0x72,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x67, 0x65, 0x74,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x7c, 0x0a, 0x18, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x75,
	0x72, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e,
	0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x74, 0x69, 0x6e, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x55, 0x72, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69,
	0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x5f,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x74, 0x69, 0x6e, 0x79, 0x75, 0x72, 0x6c, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8f, 0x02, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c,
	0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x74, 0x69, 0x6e, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70,
	0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7c, 0x0a, 0x18, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61,
	0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x74, 0x69, 0x6e, 0x79, 0x75, 0x72, 0x6c,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0xcd, 0x02, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x2e,
	0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x78, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x72, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c,
	0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x74, 0x69, 0x6e, 0x79, 0x75, 0x72, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70,
	0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x19, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x61, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x74, 0x69, 0x6e, 0x79,
	0x75, 0x72, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2f, 0x6d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x61, 0x2d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x74, 0x69,
	0x6e, 0x79, 0x75, 0x72, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_corepb_cloud_proto_rawDescOnce sync.Once
	file_corepb_cloud_proto_rawDescData = file_corepb_cloud_proto_rawDesc
)

func file_corepb_cloud_proto_rawDescGZIP() []byte {
	file_corepb_cloud_proto_rawDescOnce.Do(func() {
		file_corepb_cloud_proto_rawDescData = protoimpl.X.CompressGZIP(file_corepb_cloud_proto_rawDescData)
	})
	return file_corepb_cloud_proto_rawDescData
}

var file_corepb_cloud_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_corepb_cloud_proto_goTypes = []any{
	(*ReadRequest)(nil),            // 0: com.evrblk.monstera_example.tinyurl.corepb.ReadRequest
	(*ReadResponse)(nil),           // 1: com.evrblk.monstera_example.tinyurl.corepb.ReadResponse
	(*UpdateRequest)(nil),          // 2: com.evrblk.monstera_example.tinyurl.corepb.UpdateRequest
	(*UpdateResponse)(nil),         // 3: com.evrblk.monstera_example.tinyurl.corepb.UpdateResponse
	(*GetShortUrlRequest)(nil),     // 4: com.evrblk.monstera_example.tinyurl.corepb.GetShortUrlRequest
	(*ListShortUrlsRequest)(nil),   // 5: com.evrblk.monstera_example.tinyurl.corepb.ListShortUrlsRequest
	(*GetUserRequest)(nil),         // 6: com.evrblk.monstera_example.tinyurl.corepb.GetUserRequest
	(*x.Error)(nil),                // 7: com.evrblk.monstera.monsterax.Error
	(*GetShortUrlResponse)(nil),    // 8: com.evrblk.monstera_example.tinyurl.corepb.GetShortUrlResponse
	(*ListShortUrlsResponse)(nil),  // 9: com.evrblk.monstera_example.tinyurl.corepb.ListShortUrlsResponse
	(*GetUserResponse)(nil),        // 10: com.evrblk.monstera_example.tinyurl.corepb.GetUserResponse
	(*CreateUserRequest)(nil),      // 11: com.evrblk.monstera_example.tinyurl.corepb.CreateUserRequest
	(*CreateShortUrlRequest)(nil),  // 12: com.evrblk.monstera_example.tinyurl.corepb.CreateShortUrlRequest
	(*CreateUserResponse)(nil),     // 13: com.evrblk.monstera_example.tinyurl.corepb.CreateUserResponse
	(*CreateShortUrlResponse)(nil), // 14: com.evrblk.monstera_example.tinyurl.corepb.CreateShortUrlResponse
}
var file_corepb_cloud_proto_depIdxs = []int32{
	4,  // 0: com.evrblk.monstera_example.tinyurl.corepb.ReadRequest.get_short_url_request:type_name -> com.evrblk.monstera_example.tinyurl.corepb.GetShortUrlRequest
	5,  // 1: com.evrblk.monstera_example.tinyurl.corepb.ReadRequest.list_short_urls_request:type_name -> com.evrblk.monstera_example.tinyurl.corepb.ListShortUrlsRequest
	6,  // 2: com.evrblk.monstera_example.tinyurl.corepb.ReadRequest.get_user_request:type_name -> com.evrblk.monstera_example.tinyurl.corepb.GetUserRequest
	7,  // 3: com.evrblk.monstera_example.tinyurl.corepb.ReadResponse.error:type_name -> com.evrblk.monstera.monsterax.Error
	8,  // 4: com.evrblk.monstera_example.tinyurl.corepb.ReadResponse.get_short_url_response:type_name -> com.evrblk.monstera_example.tinyurl.corepb.GetShortUrlResponse
	9,  // 5: com.evrblk.monstera_example.tinyurl.corepb.ReadResponse.list_short_urls_response:type_name -> com.evrblk.monstera_example.tinyurl.corepb.ListShortUrlsResponse
	10, // 6: com.evrblk.monstera_example.tinyurl.corepb.ReadResponse.get_user_response:type_name -> com.evrblk.monstera_example.tinyurl.corepb.GetUserResponse
	11, // 7: com.evrblk.monstera_example.tinyurl.corepb.UpdateRequest.create_user_request:type_name -> com.evrblk.monstera_example.tinyurl.corepb.CreateUserRequest
	12, // 8: com.evrblk.monstera_example.tinyurl.corepb.UpdateRequest.create_short_url_request:type_name -> com.evrblk.monstera_example.tinyurl.corepb.CreateShortUrlRequest
	7,  // 9: com.evrblk.monstera_example.tinyurl.corepb.UpdateResponse.error:type_name -> com.evrblk.monstera.monsterax.Error
	13, // 10: com.evrblk.monstera_example.tinyurl.corepb.UpdateResponse.create_user_response:type_name -> com.evrblk.monstera_example.tinyurl.corepb.CreateUserResponse
	14, // 11: com.evrblk.monstera_example.tinyurl.corepb.UpdateResponse.create_short_url_response:type_name -> com.evrblk.monstera_example.tinyurl.corepb.CreateShortUrlResponse
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_corepb_cloud_proto_init() }
func file_corepb_cloud_proto_init() {
	if File_corepb_cloud_proto != nil {
		return
	}
	file_corepb_api_proto_init()
	file_corepb_cloud_proto_msgTypes[0].OneofWrappers = []any{
		(*ReadRequest_GetShortUrlRequest)(nil),
		(*ReadRequest_ListShortUrlsRequest)(nil),
		(*ReadRequest_GetUserRequest)(nil),
	}
	file_corepb_cloud_proto_msgTypes[1].OneofWrappers = []any{
		(*ReadResponse_GetShortUrlResponse)(nil),
		(*ReadResponse_ListShortUrlsResponse)(nil),
		(*ReadResponse_GetUserResponse)(nil),
	}
	file_corepb_cloud_proto_msgTypes[2].OneofWrappers = []any{
		(*UpdateRequest_CreateUserRequest)(nil),
		(*UpdateRequest_CreateShortUrlRequest)(nil),
	}
	file_corepb_cloud_proto_msgTypes[3].OneofWrappers = []any{
		(*UpdateResponse_CreateUserResponse)(nil),
		(*UpdateResponse_CreateShortUrlResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_corepb_cloud_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_corepb_cloud_proto_goTypes,
		DependencyIndexes: file_corepb_cloud_proto_depIdxs,
		MessageInfos:      file_corepb_cloud_proto_msgTypes,
	}.Build()
	File_corepb_cloud_proto = out.File
	file_corepb_cloud_proto_rawDesc = nil
	file_corepb_cloud_proto_goTypes = nil
	file_corepb_cloud_proto_depIdxs = nil
}
