syntax = "proto3";

option go_package = "github.com/evrblk/monstera-example/gatewaypb";

package com.evrblk.monstera_example.gatewaypb;

service ExampleServiceApi {
  rpc CreateNamespace(CreateNamespaceRequest) returns (CreateNamespaceResponse) {}
  rpc ListNamespaces(ListNamespacesRequest) returns (ListNamespacesResponse) {}
  rpc GetNamespace(GetNamespaceRequest) returns (GetNamespaceResponse) {}
  rpc DeleteNamespace(DeleteNamespaceRequest) returns (DeleteNamespaceResponse) {}
  rpc UpdateNamespace(UpdateNamespaceRequest) returns (UpdateNamespaceResponse) {}

  rpc CreateSemaphore(CreateSemaphoreRequest) returns (CreateSemaphoreResponse) {}
  rpc ListSemaphores(ListSemaphoresRequest) returns (ListSemaphoresResponse) {}
  rpc GetSemaphore(GetSemaphoreRequest) returns (GetSemaphoreResponse) {}
  rpc AcquireSemaphore(AcquireSemaphoreRequest) returns (AcquireSemaphoreResponse) {}
  rpc ReleaseSemaphore(ReleaseSemaphoreRequest) returns (ReleaseSemaphoreResponse) {}
  rpc UpdateSemaphore(UpdateSemaphoreRequest) returns (UpdateSemaphoreResponse) {}
  rpc DeleteSemaphore(DeleteSemaphoreRequest) returns (DeleteSemaphoreResponse) {}

  rpc AcquireLock(AcquireLockRequest) returns (AcquireLockResponse) {}
  rpc ReleaseLock(ReleaseLockRequest) returns (ReleaseLockResponse) {}
  rpc GetLock(GetLockRequest) returns (GetLockResponse) {}
  rpc DeleteLock(DeleteLockRequest) returns (DeleteLockResponse) {}
}

message CreateNamespaceRequest {
  string name = 1;
  string description = 2;
}

message CreateNamespaceResponse {
  Namespace namespace = 1;
}

message ListNamespacesRequest {}

message ListNamespacesResponse {
  repeated Namespace namespaces = 1;
}

message GetNamespaceRequest {
  string namespace_name = 1;
}

message GetNamespaceResponse {
  Namespace namespace = 1;
}

message DeleteNamespaceRequest {
  string namespace_name = 1;
}

message DeleteNamespaceResponse {}

message UpdateNamespaceRequest {
  string namespace_name = 1;
  string description = 2;
}

message UpdateNamespaceResponse {
  Namespace namespace = 1;
}

message CreateSemaphoreRequest {
  string namespace_name = 1;
  string semaphore_name = 2;
  string description = 3;
  uint64 permits = 4;
}

message CreateSemaphoreResponse {
  Semaphore semaphore = 1;
}

message ListSemaphoresRequest {
  string namespace_name = 1;
}

message ListSemaphoresResponse {
  repeated Semaphore semaphores = 1;
}

message GetSemaphoreRequest {
  string namespace_name = 1;
  string semaphore_name = 2;
}

message GetSemaphoreResponse {
  Semaphore semaphore = 1;
}

message AcquireSemaphoreRequest {
  string namespace_name = 1;
  string semaphore_name = 2;
  string process_id = 3;
  int64 expires_at = 4;
}

message AcquireSemaphoreResponse {
  Semaphore semaphore = 1;
  bool success = 2;
}

message ReleaseSemaphoreRequest {
  string namespace_name = 1;
  string semaphore_name = 2;
  string process_id = 3;
}

message ReleaseSemaphoreResponse {
  Semaphore semaphore = 1;
}

message UpdateSemaphoreRequest {
  string namespace_name = 1;
  string semaphore_name = 2;
  string description = 3;
  uint64 permits = 4;
}

message UpdateSemaphoreResponse {
  Semaphore semaphore = 1;
}

message DeleteSemaphoreRequest {
  string namespace_name = 1;
  string semaphore_name = 2;
}

message DeleteSemaphoreResponse {}

message Semaphore {
  string name = 1;
  string description = 2;
  int64 created_at = 3;
  int64 updated_at = 4;
  uint64 permits = 5;
  repeated SemaphoreHolder semaphore_holders = 6;
}

message SemaphoreHolder {
  string process_id = 1;
  int64 locked_at = 2;
  int64 expires_at = 3;
}

message AcquireLockRequest {
  string namespace_name = 1;
  string lock_name = 2;
  string process_id = 3;
  bool write_lock = 4;
  int64 expires_at = 5;
}

message AcquireLockResponse {
  Lock lock = 1;
  bool success = 2;
}

message ReleaseLockRequest {
  string namespace_name = 1;
  string lock_name = 2;
  string process_id = 3;
}

message ReleaseLockResponse {
  Lock lock = 1;
}

message GetLockRequest {
  string namespace_name = 1;
  string lock_name = 2;
}

message GetLockResponse {
  Lock lock = 1;
}

message DeleteLockRequest {
  string namespace_name = 1;
  string lock_name = 2;
}

message DeleteLockResponse {}

message Lock {
  string name = 1;
  LockState state = 2;
  int64 locked_at = 3;
  LockHolder write_lock_holder = 4;
  repeated LockHolder read_lock_holders = 5;
}

message LockHolder {
  string process_id = 1;
  int64 locked_at = 2;
  int64 expires_at = 3;
}

enum LockState {
  UNLOCKED = 0;
  READ_LOCKED = 1;
  WRITE_LOCKED = 2;
}

message Namespace {
  string name = 1;
  string description = 2;
  int64 created_at = 3;
  int64 updated_at = 4;
}
