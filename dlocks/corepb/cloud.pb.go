// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v6.31.0
// source: corepb/cloud.proto

package corepb

import (
	x "github.com/evrblk/monstera/x"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReadRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*ReadRequest_GetAccountRequest
	//	*ReadRequest_ListAccountsRequest
	//	*ReadRequest_GetNamespaceRequest
	//	*ReadRequest_ListNamespacesRequest
	Request       isReadRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadRequest) Reset() {
	*x = ReadRequest{}
	mi := &file_corepb_cloud_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRequest) ProtoMessage() {}

func (x *ReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_corepb_cloud_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRequest.ProtoReflect.Descriptor instead.
func (*ReadRequest) Descriptor() ([]byte, []int) {
	return file_corepb_cloud_proto_rawDescGZIP(), []int{0}
}

func (x *ReadRequest) GetRequest() isReadRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ReadRequest) GetGetAccountRequest() *GetAccountRequest {
	if x != nil {
		if x, ok := x.Request.(*ReadRequest_GetAccountRequest); ok {
			return x.GetAccountRequest
		}
	}
	return nil
}

func (x *ReadRequest) GetListAccountsRequest() *ListAccountsRequest {
	if x != nil {
		if x, ok := x.Request.(*ReadRequest_ListAccountsRequest); ok {
			return x.ListAccountsRequest
		}
	}
	return nil
}

func (x *ReadRequest) GetGetNamespaceRequest() *GetNamespaceRequest {
	if x != nil {
		if x, ok := x.Request.(*ReadRequest_GetNamespaceRequest); ok {
			return x.GetNamespaceRequest
		}
	}
	return nil
}

func (x *ReadRequest) GetListNamespacesRequest() *ListNamespacesRequest {
	if x != nil {
		if x, ok := x.Request.(*ReadRequest_ListNamespacesRequest); ok {
			return x.ListNamespacesRequest
		}
	}
	return nil
}

type isReadRequest_Request interface {
	isReadRequest_Request()
}

type ReadRequest_GetAccountRequest struct {
	GetAccountRequest *GetAccountRequest `protobuf:"bytes,2,opt,name=get_account_request,json=getAccountRequest,proto3,oneof"`
}

type ReadRequest_ListAccountsRequest struct {
	ListAccountsRequest *ListAccountsRequest `protobuf:"bytes,3,opt,name=list_accounts_request,json=listAccountsRequest,proto3,oneof"`
}

type ReadRequest_GetNamespaceRequest struct {
	GetNamespaceRequest *GetNamespaceRequest `protobuf:"bytes,4,opt,name=get_namespace_request,json=getNamespaceRequest,proto3,oneof"`
}

type ReadRequest_ListNamespacesRequest struct {
	ListNamespacesRequest *ListNamespacesRequest `protobuf:"bytes,5,opt,name=list_namespaces_request,json=listNamespacesRequest,proto3,oneof"`
}

func (*ReadRequest_GetAccountRequest) isReadRequest_Request() {}

func (*ReadRequest_ListAccountsRequest) isReadRequest_Request() {}

func (*ReadRequest_GetNamespaceRequest) isReadRequest_Request() {}

func (*ReadRequest_ListNamespacesRequest) isReadRequest_Request() {}

type ReadResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Error *x.Error               `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Types that are valid to be assigned to Response:
	//
	//	*ReadResponse_GetAccountResponse
	//	*ReadResponse_ListAccountsResponse
	//	*ReadResponse_GetNamespaceResponse
	//	*ReadResponse_ListNamespacesResponse
	Response      isReadResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadResponse) Reset() {
	*x = ReadResponse{}
	mi := &file_corepb_cloud_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResponse) ProtoMessage() {}

func (x *ReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_corepb_cloud_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResponse.ProtoReflect.Descriptor instead.
func (*ReadResponse) Descriptor() ([]byte, []int) {
	return file_corepb_cloud_proto_rawDescGZIP(), []int{1}
}

func (x *ReadResponse) GetError() *x.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReadResponse) GetResponse() isReadResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ReadResponse) GetGetAccountResponse() *GetAccountResponse {
	if x != nil {
		if x, ok := x.Response.(*ReadResponse_GetAccountResponse); ok {
			return x.GetAccountResponse
		}
	}
	return nil
}

func (x *ReadResponse) GetListAccountsResponse() *ListAccountsResponse {
	if x != nil {
		if x, ok := x.Response.(*ReadResponse_ListAccountsResponse); ok {
			return x.ListAccountsResponse
		}
	}
	return nil
}

func (x *ReadResponse) GetGetNamespaceResponse() *GetNamespaceResponse {
	if x != nil {
		if x, ok := x.Response.(*ReadResponse_GetNamespaceResponse); ok {
			return x.GetNamespaceResponse
		}
	}
	return nil
}

func (x *ReadResponse) GetListNamespacesResponse() *ListNamespacesResponse {
	if x != nil {
		if x, ok := x.Response.(*ReadResponse_ListNamespacesResponse); ok {
			return x.ListNamespacesResponse
		}
	}
	return nil
}

type isReadResponse_Response interface {
	isReadResponse_Response()
}

type ReadResponse_GetAccountResponse struct {
	GetAccountResponse *GetAccountResponse `protobuf:"bytes,2,opt,name=get_account_response,json=getAccountResponse,proto3,oneof"`
}

type ReadResponse_ListAccountsResponse struct {
	ListAccountsResponse *ListAccountsResponse `protobuf:"bytes,3,opt,name=list_accounts_response,json=listAccountsResponse,proto3,oneof"`
}

type ReadResponse_GetNamespaceResponse struct {
	GetNamespaceResponse *GetNamespaceResponse `protobuf:"bytes,4,opt,name=get_namespace_response,json=getNamespaceResponse,proto3,oneof"`
}

type ReadResponse_ListNamespacesResponse struct {
	ListNamespacesResponse *ListNamespacesResponse `protobuf:"bytes,5,opt,name=list_namespaces_response,json=listNamespacesResponse,proto3,oneof"`
}

func (*ReadResponse_GetAccountResponse) isReadResponse_Response() {}

func (*ReadResponse_ListAccountsResponse) isReadResponse_Response() {}

func (*ReadResponse_GetNamespaceResponse) isReadResponse_Response() {}

func (*ReadResponse_ListNamespacesResponse) isReadResponse_Response() {}

type UpdateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*UpdateRequest_AcquireLockRequest
	//	*UpdateRequest_ReleaseLockRequest
	//	*UpdateRequest_DeleteLockRequest
	//	*UpdateRequest_GetLockRequest
	//	*UpdateRequest_CreateNamespaceRequest
	//	*UpdateRequest_UpdateNamespaceRequest
	//	*UpdateRequest_DeleteNamespaceRequest
	//	*UpdateRequest_CreateAccountRequest
	//	*UpdateRequest_UpdateAccountRequest
	//	*UpdateRequest_DeleteAccountRequest
	Request       isUpdateRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	mi := &file_corepb_cloud_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_corepb_cloud_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_corepb_cloud_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateRequest) GetRequest() isUpdateRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *UpdateRequest) GetAcquireLockRequest() *AcquireLockRequest {
	if x != nil {
		if x, ok := x.Request.(*UpdateRequest_AcquireLockRequest); ok {
			return x.AcquireLockRequest
		}
	}
	return nil
}

func (x *UpdateRequest) GetReleaseLockRequest() *ReleaseLockRequest {
	if x != nil {
		if x, ok := x.Request.(*UpdateRequest_ReleaseLockRequest); ok {
			return x.ReleaseLockRequest
		}
	}
	return nil
}

func (x *UpdateRequest) GetDeleteLockRequest() *DeleteLockRequest {
	if x != nil {
		if x, ok := x.Request.(*UpdateRequest_DeleteLockRequest); ok {
			return x.DeleteLockRequest
		}
	}
	return nil
}

func (x *UpdateRequest) GetGetLockRequest() *GetLockRequest {
	if x != nil {
		if x, ok := x.Request.(*UpdateRequest_GetLockRequest); ok {
			return x.GetLockRequest
		}
	}
	return nil
}

func (x *UpdateRequest) GetCreateNamespaceRequest() *CreateNamespaceRequest {
	if x != nil {
		if x, ok := x.Request.(*UpdateRequest_CreateNamespaceRequest); ok {
			return x.CreateNamespaceRequest
		}
	}
	return nil
}

func (x *UpdateRequest) GetUpdateNamespaceRequest() *UpdateNamespaceRequest {
	if x != nil {
		if x, ok := x.Request.(*UpdateRequest_UpdateNamespaceRequest); ok {
			return x.UpdateNamespaceRequest
		}
	}
	return nil
}

func (x *UpdateRequest) GetDeleteNamespaceRequest() *DeleteNamespaceRequest {
	if x != nil {
		if x, ok := x.Request.(*UpdateRequest_DeleteNamespaceRequest); ok {
			return x.DeleteNamespaceRequest
		}
	}
	return nil
}

func (x *UpdateRequest) GetCreateAccountRequest() *CreateAccountRequest {
	if x != nil {
		if x, ok := x.Request.(*UpdateRequest_CreateAccountRequest); ok {
			return x.CreateAccountRequest
		}
	}
	return nil
}

func (x *UpdateRequest) GetUpdateAccountRequest() *UpdateAccountRequest {
	if x != nil {
		if x, ok := x.Request.(*UpdateRequest_UpdateAccountRequest); ok {
			return x.UpdateAccountRequest
		}
	}
	return nil
}

func (x *UpdateRequest) GetDeleteAccountRequest() *DeleteAccountRequest {
	if x != nil {
		if x, ok := x.Request.(*UpdateRequest_DeleteAccountRequest); ok {
			return x.DeleteAccountRequest
		}
	}
	return nil
}

type isUpdateRequest_Request interface {
	isUpdateRequest_Request()
}

type UpdateRequest_AcquireLockRequest struct {
	AcquireLockRequest *AcquireLockRequest `protobuf:"bytes,2,opt,name=acquire_lock_request,json=acquireLockRequest,proto3,oneof"`
}

type UpdateRequest_ReleaseLockRequest struct {
	ReleaseLockRequest *ReleaseLockRequest `protobuf:"bytes,3,opt,name=release_lock_request,json=releaseLockRequest,proto3,oneof"`
}

type UpdateRequest_DeleteLockRequest struct {
	DeleteLockRequest *DeleteLockRequest `protobuf:"bytes,4,opt,name=delete_lock_request,json=deleteLockRequest,proto3,oneof"`
}

type UpdateRequest_GetLockRequest struct {
	GetLockRequest *GetLockRequest `protobuf:"bytes,5,opt,name=get_lock_request,json=getLockRequest,proto3,oneof"`
}

type UpdateRequest_CreateNamespaceRequest struct {
	CreateNamespaceRequest *CreateNamespaceRequest `protobuf:"bytes,6,opt,name=create_namespace_request,json=createNamespaceRequest,proto3,oneof"`
}

type UpdateRequest_UpdateNamespaceRequest struct {
	UpdateNamespaceRequest *UpdateNamespaceRequest `protobuf:"bytes,7,opt,name=update_namespace_request,json=updateNamespaceRequest,proto3,oneof"`
}

type UpdateRequest_DeleteNamespaceRequest struct {
	DeleteNamespaceRequest *DeleteNamespaceRequest `protobuf:"bytes,8,opt,name=delete_namespace_request,json=deleteNamespaceRequest,proto3,oneof"`
}

type UpdateRequest_CreateAccountRequest struct {
	CreateAccountRequest *CreateAccountRequest `protobuf:"bytes,9,opt,name=create_account_request,json=createAccountRequest,proto3,oneof"`
}

type UpdateRequest_UpdateAccountRequest struct {
	UpdateAccountRequest *UpdateAccountRequest `protobuf:"bytes,10,opt,name=update_account_request,json=updateAccountRequest,proto3,oneof"`
}

type UpdateRequest_DeleteAccountRequest struct {
	DeleteAccountRequest *DeleteAccountRequest `protobuf:"bytes,11,opt,name=delete_account_request,json=deleteAccountRequest,proto3,oneof"`
}

func (*UpdateRequest_AcquireLockRequest) isUpdateRequest_Request() {}

func (*UpdateRequest_ReleaseLockRequest) isUpdateRequest_Request() {}

func (*UpdateRequest_DeleteLockRequest) isUpdateRequest_Request() {}

func (*UpdateRequest_GetLockRequest) isUpdateRequest_Request() {}

func (*UpdateRequest_CreateNamespaceRequest) isUpdateRequest_Request() {}

func (*UpdateRequest_UpdateNamespaceRequest) isUpdateRequest_Request() {}

func (*UpdateRequest_DeleteNamespaceRequest) isUpdateRequest_Request() {}

func (*UpdateRequest_CreateAccountRequest) isUpdateRequest_Request() {}

func (*UpdateRequest_UpdateAccountRequest) isUpdateRequest_Request() {}

func (*UpdateRequest_DeleteAccountRequest) isUpdateRequest_Request() {}

type UpdateResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Error *x.Error               `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Types that are valid to be assigned to Response:
	//
	//	*UpdateResponse_AcquireLockResponse
	//	*UpdateResponse_ReleaseLockResponse
	//	*UpdateResponse_DeleteLockResponse
	//	*UpdateResponse_GetLockResponse
	//	*UpdateResponse_CreateNamespaceResponse
	//	*UpdateResponse_UpdateNamespaceResponse
	//	*UpdateResponse_DeleteNamespaceResponse
	//	*UpdateResponse_CreateAccountResponse
	//	*UpdateResponse_UpdateAccountResponse
	//	*UpdateResponse_DeleteAccountResponse
	Response      isUpdateResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateResponse) Reset() {
	*x = UpdateResponse{}
	mi := &file_corepb_cloud_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponse) ProtoMessage() {}

func (x *UpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_corepb_cloud_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponse.ProtoReflect.Descriptor instead.
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return file_corepb_cloud_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateResponse) GetError() *x.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *UpdateResponse) GetResponse() isUpdateResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *UpdateResponse) GetAcquireLockResponse() *AcquireLockResponse {
	if x != nil {
		if x, ok := x.Response.(*UpdateResponse_AcquireLockResponse); ok {
			return x.AcquireLockResponse
		}
	}
	return nil
}

func (x *UpdateResponse) GetReleaseLockResponse() *ReleaseLockResponse {
	if x != nil {
		if x, ok := x.Response.(*UpdateResponse_ReleaseLockResponse); ok {
			return x.ReleaseLockResponse
		}
	}
	return nil
}

func (x *UpdateResponse) GetDeleteLockResponse() *DeleteLockResponse {
	if x != nil {
		if x, ok := x.Response.(*UpdateResponse_DeleteLockResponse); ok {
			return x.DeleteLockResponse
		}
	}
	return nil
}

func (x *UpdateResponse) GetGetLockResponse() *GetLockResponse {
	if x != nil {
		if x, ok := x.Response.(*UpdateResponse_GetLockResponse); ok {
			return x.GetLockResponse
		}
	}
	return nil
}

func (x *UpdateResponse) GetCreateNamespaceResponse() *CreateNamespaceResponse {
	if x != nil {
		if x, ok := x.Response.(*UpdateResponse_CreateNamespaceResponse); ok {
			return x.CreateNamespaceResponse
		}
	}
	return nil
}

func (x *UpdateResponse) GetUpdateNamespaceResponse() *UpdateNamespaceResponse {
	if x != nil {
		if x, ok := x.Response.(*UpdateResponse_UpdateNamespaceResponse); ok {
			return x.UpdateNamespaceResponse
		}
	}
	return nil
}

func (x *UpdateResponse) GetDeleteNamespaceResponse() *DeleteNamespaceResponse {
	if x != nil {
		if x, ok := x.Response.(*UpdateResponse_DeleteNamespaceResponse); ok {
			return x.DeleteNamespaceResponse
		}
	}
	return nil
}

func (x *UpdateResponse) GetCreateAccountResponse() *CreateAccountResponse {
	if x != nil {
		if x, ok := x.Response.(*UpdateResponse_CreateAccountResponse); ok {
			return x.CreateAccountResponse
		}
	}
	return nil
}

func (x *UpdateResponse) GetUpdateAccountResponse() *UpdateAccountResponse {
	if x != nil {
		if x, ok := x.Response.(*UpdateResponse_UpdateAccountResponse); ok {
			return x.UpdateAccountResponse
		}
	}
	return nil
}

func (x *UpdateResponse) GetDeleteAccountResponse() *DeleteAccountResponse {
	if x != nil {
		if x, ok := x.Response.(*UpdateResponse_DeleteAccountResponse); ok {
			return x.DeleteAccountResponse
		}
	}
	return nil
}

type isUpdateResponse_Response interface {
	isUpdateResponse_Response()
}

type UpdateResponse_AcquireLockResponse struct {
	AcquireLockResponse *AcquireLockResponse `protobuf:"bytes,2,opt,name=acquire_lock_response,json=acquireLockResponse,proto3,oneof"`
}

type UpdateResponse_ReleaseLockResponse struct {
	ReleaseLockResponse *ReleaseLockResponse `protobuf:"bytes,3,opt,name=release_lock_response,json=releaseLockResponse,proto3,oneof"`
}

type UpdateResponse_DeleteLockResponse struct {
	DeleteLockResponse *DeleteLockResponse `protobuf:"bytes,4,opt,name=delete_lock_response,json=deleteLockResponse,proto3,oneof"`
}

type UpdateResponse_GetLockResponse struct {
	GetLockResponse *GetLockResponse `protobuf:"bytes,5,opt,name=get_lock_response,json=getLockResponse,proto3,oneof"`
}

type UpdateResponse_CreateNamespaceResponse struct {
	CreateNamespaceResponse *CreateNamespaceResponse `protobuf:"bytes,6,opt,name=create_namespace_response,json=createNamespaceResponse,proto3,oneof"`
}

type UpdateResponse_UpdateNamespaceResponse struct {
	UpdateNamespaceResponse *UpdateNamespaceResponse `protobuf:"bytes,7,opt,name=update_namespace_response,json=updateNamespaceResponse,proto3,oneof"`
}

type UpdateResponse_DeleteNamespaceResponse struct {
	DeleteNamespaceResponse *DeleteNamespaceResponse `protobuf:"bytes,8,opt,name=delete_namespace_response,json=deleteNamespaceResponse,proto3,oneof"`
}

type UpdateResponse_CreateAccountResponse struct {
	CreateAccountResponse *CreateAccountResponse `protobuf:"bytes,9,opt,name=create_account_response,json=createAccountResponse,proto3,oneof"`
}

type UpdateResponse_UpdateAccountResponse struct {
	UpdateAccountResponse *UpdateAccountResponse `protobuf:"bytes,10,opt,name=update_account_response,json=updateAccountResponse,proto3,oneof"`
}

type UpdateResponse_DeleteAccountResponse struct {
	DeleteAccountResponse *DeleteAccountResponse `protobuf:"bytes,11,opt,name=delete_account_response,json=deleteAccountResponse,proto3,oneof"`
}

func (*UpdateResponse_AcquireLockResponse) isUpdateResponse_Response() {}

func (*UpdateResponse_ReleaseLockResponse) isUpdateResponse_Response() {}

func (*UpdateResponse_DeleteLockResponse) isUpdateResponse_Response() {}

func (*UpdateResponse_GetLockResponse) isUpdateResponse_Response() {}

func (*UpdateResponse_CreateNamespaceResponse) isUpdateResponse_Response() {}

func (*UpdateResponse_UpdateNamespaceResponse) isUpdateResponse_Response() {}

func (*UpdateResponse_DeleteNamespaceResponse) isUpdateResponse_Response() {}

func (*UpdateResponse_CreateAccountResponse) isUpdateResponse_Response() {}

func (*UpdateResponse_UpdateAccountResponse) isUpdateResponse_Response() {}

func (*UpdateResponse_DeleteAccountResponse) isUpdateResponse_Response() {}

var File_corepb_cloud_proto protoreflect.FileDescriptor

var file_corepb_cloud_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b,
	0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x1a,
	0x10, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0e, 0x78, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xf6, 0x03, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x6e, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x61, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11,
	0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x74, 0x0a, 0x15, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f,
	0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x13, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x74, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72,
	0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x5f, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7a, 0x0a,
	0x17, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x61, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x15, 0x6c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0xba, 0x04, 0x0a, 0x0c, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61,
	0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x78, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x71, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62,
	0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x5f, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x16, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61,
	0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x6c,
	0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b,
	0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x18,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x61, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x16, 0x6c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc5, 0x09, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x71, 0x0a, 0x14, 0x61, 0x63, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76,
	0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x5f, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x71, 0x0a, 0x14,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61,
	0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x6e, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x61, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x65, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x5f,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7d, 0x0a, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x5f, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7d, 0x0a, 0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76,
	0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x5f, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x7d, 0x0a, 0x18, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72,
	0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x5f, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x77, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b,
	0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x77, 0x0a, 0x16,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x61, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x77, 0x0a, 0x16, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62,
	0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x5f, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70,
	0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x09,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22,
	0x9e, 0x0a, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61,
	0x78, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x74,
	0x0a, 0x15, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x61, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x13, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x15, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b,
	0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x14, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x5f, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a,
	0x11, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x5f, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x19, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x61, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x19, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x61, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01,
	0x0a, 0x19, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x17, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x7a, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x17,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x61, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x17, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x5f,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65,
	0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x2d, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_corepb_cloud_proto_rawDescOnce sync.Once
	file_corepb_cloud_proto_rawDescData = file_corepb_cloud_proto_rawDesc
)

func file_corepb_cloud_proto_rawDescGZIP() []byte {
	file_corepb_cloud_proto_rawDescOnce.Do(func() {
		file_corepb_cloud_proto_rawDescData = protoimpl.X.CompressGZIP(file_corepb_cloud_proto_rawDescData)
	})
	return file_corepb_cloud_proto_rawDescData
}

var file_corepb_cloud_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_corepb_cloud_proto_goTypes = []any{
	(*ReadRequest)(nil),             // 0: com.evrblk.monstera_example.dlocks.corepb.ReadRequest
	(*ReadResponse)(nil),            // 1: com.evrblk.monstera_example.dlocks.corepb.ReadResponse
	(*UpdateRequest)(nil),           // 2: com.evrblk.monstera_example.dlocks.corepb.UpdateRequest
	(*UpdateResponse)(nil),          // 3: com.evrblk.monstera_example.dlocks.corepb.UpdateResponse
	(*GetAccountRequest)(nil),       // 4: com.evrblk.monstera_example.dlocks.corepb.GetAccountRequest
	(*ListAccountsRequest)(nil),     // 5: com.evrblk.monstera_example.dlocks.corepb.ListAccountsRequest
	(*GetNamespaceRequest)(nil),     // 6: com.evrblk.monstera_example.dlocks.corepb.GetNamespaceRequest
	(*ListNamespacesRequest)(nil),   // 7: com.evrblk.monstera_example.dlocks.corepb.ListNamespacesRequest
	(*x.Error)(nil),                 // 8: com.evrblk.monstera.monsterax.Error
	(*GetAccountResponse)(nil),      // 9: com.evrblk.monstera_example.dlocks.corepb.GetAccountResponse
	(*ListAccountsResponse)(nil),    // 10: com.evrblk.monstera_example.dlocks.corepb.ListAccountsResponse
	(*GetNamespaceResponse)(nil),    // 11: com.evrblk.monstera_example.dlocks.corepb.GetNamespaceResponse
	(*ListNamespacesResponse)(nil),  // 12: com.evrblk.monstera_example.dlocks.corepb.ListNamespacesResponse
	(*AcquireLockRequest)(nil),      // 13: com.evrblk.monstera_example.dlocks.corepb.AcquireLockRequest
	(*ReleaseLockRequest)(nil),      // 14: com.evrblk.monstera_example.dlocks.corepb.ReleaseLockRequest
	(*DeleteLockRequest)(nil),       // 15: com.evrblk.monstera_example.dlocks.corepb.DeleteLockRequest
	(*GetLockRequest)(nil),          // 16: com.evrblk.monstera_example.dlocks.corepb.GetLockRequest
	(*CreateNamespaceRequest)(nil),  // 17: com.evrblk.monstera_example.dlocks.corepb.CreateNamespaceRequest
	(*UpdateNamespaceRequest)(nil),  // 18: com.evrblk.monstera_example.dlocks.corepb.UpdateNamespaceRequest
	(*DeleteNamespaceRequest)(nil),  // 19: com.evrblk.monstera_example.dlocks.corepb.DeleteNamespaceRequest
	(*CreateAccountRequest)(nil),    // 20: com.evrblk.monstera_example.dlocks.corepb.CreateAccountRequest
	(*UpdateAccountRequest)(nil),    // 21: com.evrblk.monstera_example.dlocks.corepb.UpdateAccountRequest
	(*DeleteAccountRequest)(nil),    // 22: com.evrblk.monstera_example.dlocks.corepb.DeleteAccountRequest
	(*AcquireLockResponse)(nil),     // 23: com.evrblk.monstera_example.dlocks.corepb.AcquireLockResponse
	(*ReleaseLockResponse)(nil),     // 24: com.evrblk.monstera_example.dlocks.corepb.ReleaseLockResponse
	(*DeleteLockResponse)(nil),      // 25: com.evrblk.monstera_example.dlocks.corepb.DeleteLockResponse
	(*GetLockResponse)(nil),         // 26: com.evrblk.monstera_example.dlocks.corepb.GetLockResponse
	(*CreateNamespaceResponse)(nil), // 27: com.evrblk.monstera_example.dlocks.corepb.CreateNamespaceResponse
	(*UpdateNamespaceResponse)(nil), // 28: com.evrblk.monstera_example.dlocks.corepb.UpdateNamespaceResponse
	(*DeleteNamespaceResponse)(nil), // 29: com.evrblk.monstera_example.dlocks.corepb.DeleteNamespaceResponse
	(*CreateAccountResponse)(nil),   // 30: com.evrblk.monstera_example.dlocks.corepb.CreateAccountResponse
	(*UpdateAccountResponse)(nil),   // 31: com.evrblk.monstera_example.dlocks.corepb.UpdateAccountResponse
	(*DeleteAccountResponse)(nil),   // 32: com.evrblk.monstera_example.dlocks.corepb.DeleteAccountResponse
}
var file_corepb_cloud_proto_depIdxs = []int32{
	4,  // 0: com.evrblk.monstera_example.dlocks.corepb.ReadRequest.get_account_request:type_name -> com.evrblk.monstera_example.dlocks.corepb.GetAccountRequest
	5,  // 1: com.evrblk.monstera_example.dlocks.corepb.ReadRequest.list_accounts_request:type_name -> com.evrblk.monstera_example.dlocks.corepb.ListAccountsRequest
	6,  // 2: com.evrblk.monstera_example.dlocks.corepb.ReadRequest.get_namespace_request:type_name -> com.evrblk.monstera_example.dlocks.corepb.GetNamespaceRequest
	7,  // 3: com.evrblk.monstera_example.dlocks.corepb.ReadRequest.list_namespaces_request:type_name -> com.evrblk.monstera_example.dlocks.corepb.ListNamespacesRequest
	8,  // 4: com.evrblk.monstera_example.dlocks.corepb.ReadResponse.error:type_name -> com.evrblk.monstera.monsterax.Error
	9,  // 5: com.evrblk.monstera_example.dlocks.corepb.ReadResponse.get_account_response:type_name -> com.evrblk.monstera_example.dlocks.corepb.GetAccountResponse
	10, // 6: com.evrblk.monstera_example.dlocks.corepb.ReadResponse.list_accounts_response:type_name -> com.evrblk.monstera_example.dlocks.corepb.ListAccountsResponse
	11, // 7: com.evrblk.monstera_example.dlocks.corepb.ReadResponse.get_namespace_response:type_name -> com.evrblk.monstera_example.dlocks.corepb.GetNamespaceResponse
	12, // 8: com.evrblk.monstera_example.dlocks.corepb.ReadResponse.list_namespaces_response:type_name -> com.evrblk.monstera_example.dlocks.corepb.ListNamespacesResponse
	13, // 9: com.evrblk.monstera_example.dlocks.corepb.UpdateRequest.acquire_lock_request:type_name -> com.evrblk.monstera_example.dlocks.corepb.AcquireLockRequest
	14, // 10: com.evrblk.monstera_example.dlocks.corepb.UpdateRequest.release_lock_request:type_name -> com.evrblk.monstera_example.dlocks.corepb.ReleaseLockRequest
	15, // 11: com.evrblk.monstera_example.dlocks.corepb.UpdateRequest.delete_lock_request:type_name -> com.evrblk.monstera_example.dlocks.corepb.DeleteLockRequest
	16, // 12: com.evrblk.monstera_example.dlocks.corepb.UpdateRequest.get_lock_request:type_name -> com.evrblk.monstera_example.dlocks.corepb.GetLockRequest
	17, // 13: com.evrblk.monstera_example.dlocks.corepb.UpdateRequest.create_namespace_request:type_name -> com.evrblk.monstera_example.dlocks.corepb.CreateNamespaceRequest
	18, // 14: com.evrblk.monstera_example.dlocks.corepb.UpdateRequest.update_namespace_request:type_name -> com.evrblk.monstera_example.dlocks.corepb.UpdateNamespaceRequest
	19, // 15: com.evrblk.monstera_example.dlocks.corepb.UpdateRequest.delete_namespace_request:type_name -> com.evrblk.monstera_example.dlocks.corepb.DeleteNamespaceRequest
	20, // 16: com.evrblk.monstera_example.dlocks.corepb.UpdateRequest.create_account_request:type_name -> com.evrblk.monstera_example.dlocks.corepb.CreateAccountRequest
	21, // 17: com.evrblk.monstera_example.dlocks.corepb.UpdateRequest.update_account_request:type_name -> com.evrblk.monstera_example.dlocks.corepb.UpdateAccountRequest
	22, // 18: com.evrblk.monstera_example.dlocks.corepb.UpdateRequest.delete_account_request:type_name -> com.evrblk.monstera_example.dlocks.corepb.DeleteAccountRequest
	8,  // 19: com.evrblk.monstera_example.dlocks.corepb.UpdateResponse.error:type_name -> com.evrblk.monstera.monsterax.Error
	23, // 20: com.evrblk.monstera_example.dlocks.corepb.UpdateResponse.acquire_lock_response:type_name -> com.evrblk.monstera_example.dlocks.corepb.AcquireLockResponse
	24, // 21: com.evrblk.monstera_example.dlocks.corepb.UpdateResponse.release_lock_response:type_name -> com.evrblk.monstera_example.dlocks.corepb.ReleaseLockResponse
	25, // 22: com.evrblk.monstera_example.dlocks.corepb.UpdateResponse.delete_lock_response:type_name -> com.evrblk.monstera_example.dlocks.corepb.DeleteLockResponse
	26, // 23: com.evrblk.monstera_example.dlocks.corepb.UpdateResponse.get_lock_response:type_name -> com.evrblk.monstera_example.dlocks.corepb.GetLockResponse
	27, // 24: com.evrblk.monstera_example.dlocks.corepb.UpdateResponse.create_namespace_response:type_name -> com.evrblk.monstera_example.dlocks.corepb.CreateNamespaceResponse
	28, // 25: com.evrblk.monstera_example.dlocks.corepb.UpdateResponse.update_namespace_response:type_name -> com.evrblk.monstera_example.dlocks.corepb.UpdateNamespaceResponse
	29, // 26: com.evrblk.monstera_example.dlocks.corepb.UpdateResponse.delete_namespace_response:type_name -> com.evrblk.monstera_example.dlocks.corepb.DeleteNamespaceResponse
	30, // 27: com.evrblk.monstera_example.dlocks.corepb.UpdateResponse.create_account_response:type_name -> com.evrblk.monstera_example.dlocks.corepb.CreateAccountResponse
	31, // 28: com.evrblk.monstera_example.dlocks.corepb.UpdateResponse.update_account_response:type_name -> com.evrblk.monstera_example.dlocks.corepb.UpdateAccountResponse
	32, // 29: com.evrblk.monstera_example.dlocks.corepb.UpdateResponse.delete_account_response:type_name -> com.evrblk.monstera_example.dlocks.corepb.DeleteAccountResponse
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_corepb_cloud_proto_init() }
func file_corepb_cloud_proto_init() {
	if File_corepb_cloud_proto != nil {
		return
	}
	file_corepb_api_proto_init()
	file_corepb_cloud_proto_msgTypes[0].OneofWrappers = []any{
		(*ReadRequest_GetAccountRequest)(nil),
		(*ReadRequest_ListAccountsRequest)(nil),
		(*ReadRequest_GetNamespaceRequest)(nil),
		(*ReadRequest_ListNamespacesRequest)(nil),
	}
	file_corepb_cloud_proto_msgTypes[1].OneofWrappers = []any{
		(*ReadResponse_GetAccountResponse)(nil),
		(*ReadResponse_ListAccountsResponse)(nil),
		(*ReadResponse_GetNamespaceResponse)(nil),
		(*ReadResponse_ListNamespacesResponse)(nil),
	}
	file_corepb_cloud_proto_msgTypes[2].OneofWrappers = []any{
		(*UpdateRequest_AcquireLockRequest)(nil),
		(*UpdateRequest_ReleaseLockRequest)(nil),
		(*UpdateRequest_DeleteLockRequest)(nil),
		(*UpdateRequest_GetLockRequest)(nil),
		(*UpdateRequest_CreateNamespaceRequest)(nil),
		(*UpdateRequest_UpdateNamespaceRequest)(nil),
		(*UpdateRequest_DeleteNamespaceRequest)(nil),
		(*UpdateRequest_CreateAccountRequest)(nil),
		(*UpdateRequest_UpdateAccountRequest)(nil),
		(*UpdateRequest_DeleteAccountRequest)(nil),
	}
	file_corepb_cloud_proto_msgTypes[3].OneofWrappers = []any{
		(*UpdateResponse_AcquireLockResponse)(nil),
		(*UpdateResponse_ReleaseLockResponse)(nil),
		(*UpdateResponse_DeleteLockResponse)(nil),
		(*UpdateResponse_GetLockResponse)(nil),
		(*UpdateResponse_CreateNamespaceResponse)(nil),
		(*UpdateResponse_UpdateNamespaceResponse)(nil),
		(*UpdateResponse_DeleteNamespaceResponse)(nil),
		(*UpdateResponse_CreateAccountResponse)(nil),
		(*UpdateResponse_UpdateAccountResponse)(nil),
		(*UpdateResponse_DeleteAccountResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_corepb_cloud_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_corepb_cloud_proto_goTypes,
		DependencyIndexes: file_corepb_cloud_proto_depIdxs,
		MessageInfos:      file_corepb_cloud_proto_msgTypes,
	}.Build()
	File_corepb_cloud_proto = out.File
	file_corepb_cloud_proto_rawDesc = nil
	file_corepb_cloud_proto_goTypes = nil
	file_corepb_cloud_proto_depIdxs = nil
}
