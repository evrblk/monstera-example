// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: gatewaypb/api.proto

package gatewaypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LocksServiceApi_CreateNamespace_FullMethodName = "/com.evrblk.monstera_example.gatewaypb.LocksServiceApi/CreateNamespace"
	LocksServiceApi_ListNamespaces_FullMethodName  = "/com.evrblk.monstera_example.gatewaypb.LocksServiceApi/ListNamespaces"
	LocksServiceApi_GetNamespace_FullMethodName    = "/com.evrblk.monstera_example.gatewaypb.LocksServiceApi/GetNamespace"
	LocksServiceApi_DeleteNamespace_FullMethodName = "/com.evrblk.monstera_example.gatewaypb.LocksServiceApi/DeleteNamespace"
	LocksServiceApi_UpdateNamespace_FullMethodName = "/com.evrblk.monstera_example.gatewaypb.LocksServiceApi/UpdateNamespace"
	LocksServiceApi_AcquireLock_FullMethodName     = "/com.evrblk.monstera_example.gatewaypb.LocksServiceApi/AcquireLock"
	LocksServiceApi_ReleaseLock_FullMethodName     = "/com.evrblk.monstera_example.gatewaypb.LocksServiceApi/ReleaseLock"
	LocksServiceApi_GetLock_FullMethodName         = "/com.evrblk.monstera_example.gatewaypb.LocksServiceApi/GetLock"
	LocksServiceApi_DeleteLock_FullMethodName      = "/com.evrblk.monstera_example.gatewaypb.LocksServiceApi/DeleteLock"
)

// LocksServiceApiClient is the client API for LocksServiceApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocksServiceApiClient interface {
	CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error)
	ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error)
	GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error)
	DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error)
	UpdateNamespace(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*UpdateNamespaceResponse, error)
	AcquireLock(ctx context.Context, in *AcquireLockRequest, opts ...grpc.CallOption) (*AcquireLockResponse, error)
	ReleaseLock(ctx context.Context, in *ReleaseLockRequest, opts ...grpc.CallOption) (*ReleaseLockResponse, error)
	GetLock(ctx context.Context, in *GetLockRequest, opts ...grpc.CallOption) (*GetLockResponse, error)
	DeleteLock(ctx context.Context, in *DeleteLockRequest, opts ...grpc.CallOption) (*DeleteLockResponse, error)
}

type locksServiceApiClient struct {
	cc grpc.ClientConnInterface
}

func NewLocksServiceApiClient(cc grpc.ClientConnInterface) LocksServiceApiClient {
	return &locksServiceApiClient{cc}
}

func (c *locksServiceApiClient) CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNamespaceResponse)
	err := c.cc.Invoke(ctx, LocksServiceApi_CreateNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locksServiceApiClient) ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNamespacesResponse)
	err := c.cc.Invoke(ctx, LocksServiceApi_ListNamespaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locksServiceApiClient) GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNamespaceResponse)
	err := c.cc.Invoke(ctx, LocksServiceApi_GetNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locksServiceApiClient) DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteNamespaceResponse)
	err := c.cc.Invoke(ctx, LocksServiceApi_DeleteNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locksServiceApiClient) UpdateNamespace(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*UpdateNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNamespaceResponse)
	err := c.cc.Invoke(ctx, LocksServiceApi_UpdateNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locksServiceApiClient) AcquireLock(ctx context.Context, in *AcquireLockRequest, opts ...grpc.CallOption) (*AcquireLockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcquireLockResponse)
	err := c.cc.Invoke(ctx, LocksServiceApi_AcquireLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locksServiceApiClient) ReleaseLock(ctx context.Context, in *ReleaseLockRequest, opts ...grpc.CallOption) (*ReleaseLockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReleaseLockResponse)
	err := c.cc.Invoke(ctx, LocksServiceApi_ReleaseLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locksServiceApiClient) GetLock(ctx context.Context, in *GetLockRequest, opts ...grpc.CallOption) (*GetLockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLockResponse)
	err := c.cc.Invoke(ctx, LocksServiceApi_GetLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locksServiceApiClient) DeleteLock(ctx context.Context, in *DeleteLockRequest, opts ...grpc.CallOption) (*DeleteLockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLockResponse)
	err := c.cc.Invoke(ctx, LocksServiceApi_DeleteLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocksServiceApiServer is the server API for LocksServiceApi service.
// All implementations must embed UnimplementedLocksServiceApiServer
// for forward compatibility.
type LocksServiceApiServer interface {
	CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error)
	ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error)
	GetNamespace(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error)
	DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error)
	UpdateNamespace(context.Context, *UpdateNamespaceRequest) (*UpdateNamespaceResponse, error)
	AcquireLock(context.Context, *AcquireLockRequest) (*AcquireLockResponse, error)
	ReleaseLock(context.Context, *ReleaseLockRequest) (*ReleaseLockResponse, error)
	GetLock(context.Context, *GetLockRequest) (*GetLockResponse, error)
	DeleteLock(context.Context, *DeleteLockRequest) (*DeleteLockResponse, error)
	mustEmbedUnimplementedLocksServiceApiServer()
}

// UnimplementedLocksServiceApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLocksServiceApiServer struct{}

func (UnimplementedLocksServiceApiServer) CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (UnimplementedLocksServiceApiServer) ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaces not implemented")
}
func (UnimplementedLocksServiceApiServer) GetNamespace(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespace not implemented")
}
func (UnimplementedLocksServiceApiServer) DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (UnimplementedLocksServiceApiServer) UpdateNamespace(context.Context, *UpdateNamespaceRequest) (*UpdateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespace not implemented")
}
func (UnimplementedLocksServiceApiServer) AcquireLock(context.Context, *AcquireLockRequest) (*AcquireLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcquireLock not implemented")
}
func (UnimplementedLocksServiceApiServer) ReleaseLock(context.Context, *ReleaseLockRequest) (*ReleaseLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseLock not implemented")
}
func (UnimplementedLocksServiceApiServer) GetLock(context.Context, *GetLockRequest) (*GetLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLock not implemented")
}
func (UnimplementedLocksServiceApiServer) DeleteLock(context.Context, *DeleteLockRequest) (*DeleteLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLock not implemented")
}
func (UnimplementedLocksServiceApiServer) mustEmbedUnimplementedLocksServiceApiServer() {}
func (UnimplementedLocksServiceApiServer) testEmbeddedByValue()                         {}

// UnsafeLocksServiceApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocksServiceApiServer will
// result in compilation errors.
type UnsafeLocksServiceApiServer interface {
	mustEmbedUnimplementedLocksServiceApiServer()
}

func RegisterLocksServiceApiServer(s grpc.ServiceRegistrar, srv LocksServiceApiServer) {
	// If the following call pancis, it indicates UnimplementedLocksServiceApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LocksServiceApi_ServiceDesc, srv)
}

func _LocksServiceApi_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocksServiceApiServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocksServiceApi_CreateNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocksServiceApiServer).CreateNamespace(ctx, req.(*CreateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocksServiceApi_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocksServiceApiServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocksServiceApi_ListNamespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocksServiceApiServer).ListNamespaces(ctx, req.(*ListNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocksServiceApi_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocksServiceApiServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocksServiceApi_GetNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocksServiceApiServer).GetNamespace(ctx, req.(*GetNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocksServiceApi_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocksServiceApiServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocksServiceApi_DeleteNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocksServiceApiServer).DeleteNamespace(ctx, req.(*DeleteNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocksServiceApi_UpdateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocksServiceApiServer).UpdateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocksServiceApi_UpdateNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocksServiceApiServer).UpdateNamespace(ctx, req.(*UpdateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocksServiceApi_AcquireLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcquireLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocksServiceApiServer).AcquireLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocksServiceApi_AcquireLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocksServiceApiServer).AcquireLock(ctx, req.(*AcquireLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocksServiceApi_ReleaseLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocksServiceApiServer).ReleaseLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocksServiceApi_ReleaseLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocksServiceApiServer).ReleaseLock(ctx, req.(*ReleaseLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocksServiceApi_GetLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocksServiceApiServer).GetLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocksServiceApi_GetLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocksServiceApiServer).GetLock(ctx, req.(*GetLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocksServiceApi_DeleteLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocksServiceApiServer).DeleteLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocksServiceApi_DeleteLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocksServiceApiServer).DeleteLock(ctx, req.(*DeleteLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocksServiceApi_ServiceDesc is the grpc.ServiceDesc for LocksServiceApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocksServiceApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.evrblk.monstera_example.gatewaypb.LocksServiceApi",
	HandlerType: (*LocksServiceApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNamespace",
			Handler:    _LocksServiceApi_CreateNamespace_Handler,
		},
		{
			MethodName: "ListNamespaces",
			Handler:    _LocksServiceApi_ListNamespaces_Handler,
		},
		{
			MethodName: "GetNamespace",
			Handler:    _LocksServiceApi_GetNamespace_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _LocksServiceApi_DeleteNamespace_Handler,
		},
		{
			MethodName: "UpdateNamespace",
			Handler:    _LocksServiceApi_UpdateNamespace_Handler,
		},
		{
			MethodName: "AcquireLock",
			Handler:    _LocksServiceApi_AcquireLock_Handler,
		},
		{
			MethodName: "ReleaseLock",
			Handler:    _LocksServiceApi_ReleaseLock_Handler,
		},
		{
			MethodName: "GetLock",
			Handler:    _LocksServiceApi_GetLock_Handler,
		},
		{
			MethodName: "DeleteLock",
			Handler:    _LocksServiceApi_DeleteLock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gatewaypb/api.proto",
}
